WARNING:  most of this is stale, go away!

log/
	Base modules specific to logging
xdb/
	Base modules specific to xdb
io/
	Base modules providing new IO methods
gen/
	Base modules providing general functionality


once config is loaded, all base modules are (loaded and) initialized.  during init, they use cfreg("node",my_func,arg) to receive config file commands.

config file is then checked to make sure it's valid and fully handled, then registered handlers in the base modules are executed.  they then start any threads or do any init they need to do, and register handlers for incoming packets.
(packets come in from the base modules too, passed to deliver())

packets are delivered based on ptype, then on the idnode (config file section), then on the registered handlers for that section.

handlers can either return R_PASS (continue), R_OK (done processing and packet delivered), or R_ERR (stop processing because of failure)

issue: when base modules receive packets to handle, they often need to know which host it was for (because they don't control this, the config does)
they shouldn't try and check the config, they simply need to look at the dpacket->host or the to="" in the xml, duh :)

base modules should never use libetherx, replace with custom internal pth functions... but for base_load, the so's it loads may require that lib or any other lib

Example packets:

<log type="notice" from="jabber.org">User foo@jabber.org hit message rate limit</log>
(from="_internal" for logs from entities that are not services, such as an xdb or internally in jabberd or in a base module)
(never have a to="" attrib, from is set by originator)

<xdb type="get" to="foo@jabber.org/jabber:iq:vcard-temp" id="returnID" from="jabber.org"><vCard xmlns="jabber:iq:vcard-temp">...</vCard></xdb>
<xdb type="result" id="returnID" to="jabber.org" from="foo@jabber.org/jabber:iq:vcard-temp"><vCard xmlns="jabber:iq:vcard-temp">...</vCard></xdb>
(all get/set's are routed to the xdb handler based on the to host, all results are delivered to the SERVICE identified in the from)

XXX - issue on handling errors for xdb results, for get and set

---------- RANT on packet handlers
copying packets is expensive, so we want to minimize copies.  it has to be determined *beforehand* that a copy should be made,
so for ease it's just hard-wired that the o_DELIVER will be responsible for freeing the packet, and if there are multiple ones they are given copies
the packet also needs to be flagged as "handled" or not, which is the return result from the handlers
a packet is only handled when ANY handler (even if it's just an o_PRECOND) returns an r_OK
handling is stopped upon an r_ERR or r_LAST, and no change with r_PASS
r_ERR means the handler actually modified the packet appropriately to represent the error

---------- RANT on session routing
for an auth iq, set the sfrom="45a3@10348.polld.jabber.org" to identify the session id within the connection service
set the sto="jabber.org" to identify the hostname that should be handling the service.
return packets from the manager service can then set sto="" to the sfrom, and set the sfrom="4015@farm03.jabber.org" to identify the session id within the manager service.
subsequent packets addressed to either session can be identified, and the other's sid is stored within each session.
sto="" is used in place of the to="" attribute, and only valid within polld.
if a service receives a packet because of a sto="" and it doesn't handle sessions, it should notice the sto="" attrib and bounce it

all packets are bounced intelligently, xdbs returned empty, logs not bounced, and packets bounced like normal (with type="error", etc)

--------- RANT on mass virtual hosting
by using a <host/> in a session handler section, it will receive a copy of EVERY outgoing packet (to other servers), and if it uses xdb to lookup the host to see if it handles it, wow, that sucks
better way would be to write a base module that does the db lookup (and can update when it changes) and registers the idnode w/ the right hostnames in the db.

