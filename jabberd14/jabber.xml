<jabber>

  <!--
  This is the Jabber server configuration file. The file is 
  broken into different sections based on the services being 
  managed by jabberd, the server daemon. Most of the important 
  sections have comments and are easy to modify. You can find
  full instructions in the server howto, which is available at
  http://docs.jabber.org/. Note that when you see a tag like 
  "jabberd:cmdline", it's automatically replaced on startup 
  with the command line flag passed in to jabberd. This enables
  you to override parameters set in this configuration file if 
  necessary or desired.
  -->

  <!-- 
  The following <service/> section is for the session manager, 
  the most important component within the server. This section
  contains the following types of information: 

    * the server's hostname
    * other basic server information
    * the location of the session log file
    * email addresses for server administrators 
    * the location of the server that provides update information
    * registration instructions for users
    * a list of agents with which users can register
    * load rules for the modules within the session manager

  -->

  <service id="sessions">

    <!-- 
    Change hostname below to something other than "localhost", 
    i.e., to the hostname or IP address of your Jabber server. 
    Multiple <host/> entries are allowed - each one is for a 
    separate virtual server.
    -->

    <host><jabberd:cmdline flag="h">localhost</jabberd:cmdline></host>

    <!-- This is the custom configuration section for the 
    Jabber session manager, a.k.a. "JSM". -->

    <jsm xmlns="jabber:config:jsm">

      <!-- basic server information -->

      <info>
        <name>Jabber Server</name>
        <description>A Jabber Server!</description>
        <url>http://foo.bar/</url>
      </info>

      <!-- registration instructions, the notify attribute will send the server administrator(s) a message after a valid registration -->

      <register notify="yes">
        <instructions>Choose a username and password to register with this server.</instructions>
        <name/>
        <email/>
      </register>

      <!-- welcome note, sent to every new registration, remove to disable -->
      <welcome>
        <subject>Welcome!</subject>
        <body>This is a welcome message from your server, and maybe even your first Jabber message.  Please enjoy the service!</body>
      </welcome>

      <!-- location of the session log file -->

      <log>
        <file>session.log</file>
        <type>session</type>
      </log>

      <!-- IDs with admin access - these will receive admin messages. -->

      <!--
      <admin>
        <read>support@localhost</read>
        <write>admin@localhost</write>
      </admin>
      -->

      <!--
      This is the resource that checks for updated versions 
      of the Jabber server software. You don't loose any functionality
      if you just remove it. This is especially a good strategy
      if your server is behind a firewall. If you want to use 
      this feature, change 'localhost' to the hostname or IP 
      address of your server, making sure that it is the same 
      as your entry for <host/> above.
      -->

      <update><jabberd:cmdline flag="h">localhost</jabberd:cmdline></update>

      <!--
      The <agents/> section identifies the transports and other
      agents that are available on this server. Note that each
      agent identified here must be further defined in its own 
      <service/> section below. These agents will appear in the
      user interface of Jabber clients that connect to your
      server.
      -->

      <agents>

        <!-- 
        This is the default agent for the master Jabber User 
        Directory, a.k.a. "JUD", which is located at jabber.org.
        You can add separate <agent/> sections for additional
        directories, e.g., one for a company intranet.
        -->

        <agent jid="users.jabber.org">
          <name>Jabber User Directory</name>
          <description>You may register and create a public searchable profile, and search for other registered Jabber users.</description>
          <service>jud</service>
          <register/>
          <search/>
        </agent>

        <!--
        The following agents are examples only, you will need to
        create/modify them to get them working on your Jabber 
        server. See the README files for each agent and/or the 
        server howto for further information. 
        -->

        <!-- we're commenting these out, of course :)

        <agent jid="conference.localhost">
          <name>Conferencing</name>
          <description>groupchat on localhost</description>
          <service>conferencing</service>
          <groupchat/>
          <register/>
        </agent>

        <agent jid="irc.localhost">
          <name>IRC Transport</name>
          <description>irc-t on localhost</description>
          <service>irc</service>
          <register/>
          <groupchat/>
        </agent>

        <agent jid="aim.localhost">
          <name>AIM Transport</name>
          <description>This is the AIM Transport</description>
          <transport>AIM/AOL ScreenName</transport>
          <service>aim</service>
          <register/>
        </agent>

        <agent jid="yahoo.localhost">
          <name>Yahoo Transport</name>
          <description>Gateway to the Yahoo! Messenger Protocol</description>
          <transport>Yahoo! ID</transport>
          <service>yahoo</service>
          <register/>
        </agent>

        end of <agent/> examples -->

      </agents>

    </jsm>

    <!--
    The following section dynamically loads the individual
    modules that make up the session manager. Remove or 
    comment out modules to disable them.
    -->

    <load main="jsm">
      <jsm>./jsm/jsm.so</jsm>
      <mod_echo>./jsm/jsm.so</mod_echo>
      <mod_roster>./jsm/jsm.so</mod_roster>
      <mod_time>./jsm/jsm.so</mod_time>
      <mod_vcard>./jsm/jsm.so</mod_vcard>
      <mod_last>./jsm/jsm.so</mod_last>
      <mod_version>./jsm/jsm.so</mod_version>
      <mod_announce>./jsm/jsm.so</mod_announce>
      <mod_agents>./jsm/jsm.so</mod_agents>
      <mod_admin>./jsm/jsm.so</mod_admin>
      <mod_private>./jsm/jsm.so</mod_private>
      <mod_filter>./jsm/jsm.so</mod_filter>
      <mod_presence>./jsm/jsm.so</mod_presence>
      <mod_auth_plain>./jsm/jsm.so</mod_auth_plain>
      <mod_auth_digest>./jsm/jsm.so</mod_auth_digest>
      <mod_auth_0k>./jsm/jsm.so</mod_auth_0k>
      <mod_register>./jsm/jsm.so</mod_register>
      <mod_log>./jsm/jsm.so</mod_log>
    </load>

  </service>

  <!-- OK, we've finished defining the Jabber Session Manager. -->

  <!-- The <xdb/> component handles all data storage, using the filesystem. -->

  <xdb id="xdb">
    <host/>
    <load>
      <xdb_file>./xdb_file/xdb_file.so</xdb_file>
    </load>
    <xdb_file xmlns="jabber:config:xdb_file">
      <spool><jabberd:cmdline flag='s'>./spool</jabberd:cmdline></spool>
    </xdb_file>
  </xdb>

  <!--
  The following service manages incoming client socket connections.
  There are several items you can set here to optimize performance:

    * authtime - default is unlimited, but you can set this to
      limit the amount of time allowed for authentication to be
      completed, e.g., <authtime>10</authtime> for 10 seconds

    * rate - this controls the number of times that an IP can try
      to connect within a certain time period. The default is 25
      connection attempts ("points") in five seconds, but you can
      change this setting as necessary.

    * karma - this is an input/output rate limiting system that
      the Jabber team came up with to prevent bandwidth hogging.
      For details about karma, see docs.jabber.org. These
      settings apply per connection/socket and can be changed as
      desired.

  -->

  <service id="c2s">
    <load>
      <pthsock_client>./pthsock/pthsock_client.so</pthsock_client>
    </load>
    <pthcsock xmlns='jabber:config:pth-csock'>
      <authtime/>
      <rate time="5" points="25"/>
      <karma>
        <max>10</max>
        <inc>1</inc>
        <dec>1</dec>
        <restore>5</restore>
        <penalty>-5</penalty>
      </karma>
      <!-- 
      Use these to listen on particular addresses and/or ports.
      <ip port="5223"/>
      <ip port="5222">127.0.0.1</ip>
      -->
    </pthcsock>
  </service>

  <!-- 
  This is the default server logging component, 
  which copies to a file and to STDERR. 
  -->

  <log id='logger'>
    <host/>
    <format>%d: [%t] (%h): %s</format>
    <file>error.log</file>
    <stderr/>
  </log>

  <!-- The following two services are for handling server-to-server traffic. -->

  <!-- External asychronous DNS resolver -->

  <service id="dnsrv">
    <host/>
    <load>
      <dnsrv>./dnsrv/dnsrv.so</dnsrv>
    </load>
    <dnsrv xmlns="jabber:config:dnsrv">
    	<resend service="_jabber._tcp">s2s</resend> <!-- for supporting SRV records -->
    	<resend>s2s</resend> 
    </dnsrv>
  </service>

  <!--
  Handles server connections and dialback hostname verification.
  Notice that here again we have rate limits and karma to prevent
  nasty connection attempt and bandwidth abuses. The <legacy/>
  element is here to enable communication with old 1.0 servers.
  The karma settings are a little higher here to handle the higher
  traffic of server-to-server connections.
  -->

  <service id="s2s">
    <load>
      <pthsock_server>./pthsock/pthsock_server.so</pthsock_server>
    </load>
    <pthssock xmlns='jabber:config:pth-ssock'>
      <legacy/>
      <rate time="5" points="25"/>
      <karma>
        <max>30</max>
        <inc>2</inc>
        <dec>1</dec>
        <restore>15</restore>
        <penalty>-1</penalty>
      </karma>
      <!-- Use these to listen on particular addresses and/or ports.
      <ip port="7000"/>
      <ip port="5269">127.0.0.1</ip>
      -->
    </pthssock>
  </service>

  <!-- 
  If you identified additional agents in the main <service/> 
  section (see examples above), you'll need to define each 
  of them here using a separate <service/> section for each 
  <agent/> you identified. The following are examples only, 
  you will need to create/modify them to get them working 
  on your Jabber server. See the README files for each 
  agent and/or the server howto for further information. 
  -->

  <!-- we're commenting these out, of course :)

  <service id="conference">
    <load>
      <groupchat>/path/to/groupchat.so</groupchat>
    </load>
    <host>conference.localhost</host>
  </service>

  <service id="irc">
    <host>irc.localhost</host>
  </service>

  <service id="aim.localhost">
    <accept>
      <ip/>
      <port>7009</port>
      <secret>jabber-rocks</secret>
    </accept>
  </service>

  <service id="yahoo.localhost">
    <accept>
      <ip/>
      <port>9001</port>
      <secret>jabber-rocks</secret>
    </accept>
  </service>

  end of <service/> examples -->

</jabber>
